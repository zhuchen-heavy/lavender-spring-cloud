
server:
  port: 8081

## 一：参考：https://www.fangzhipeng.com/springcloud/2018/12/05/sc-f-gateway2.html

### 1：test 2 ：时间的断言路由

#spring:
#  profiles:
#    active: after_route
#
## 注：在application.yml再建一个配置文件，语法是三个横线，在此配置文件中通过spring.profiles来配置文件名，和spring.profiles.active一致
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: after_route # id需要唯一
#        uri: http://httpbin.org:80/get
#        predicates:
#        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
#  profiles: after_route

#######################################################################################

### 2：test 3 ：header的断言路由

#spring:
#  profiles:
#    active: header_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: header_route
#        uri: http://httpbin.org:80/get
#        predicates:
#        - Header=X-Request-Id, \d+
#  profiles: header_route

#######################################################################################

### 3：test 4 ：cookie的断言路由

#spring:
#  profiles:
#    active: cookie_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: cookie_route
#        uri: http://httpbin.org:80/get
#        predicates:
#        - Cookie=name, forezp
#  profiles: cookie_route

#######################################################################################

### 4：test 5 ：Host的路由断言

#spring:
#  profiles:
#    active: host_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: host_route
#        uri: http://httpbin.org:80/get
#        predicates:
#        - Host=**.fangzhipeng.com
#  profiles: host_route

#######################################################################################

### 5：test 6 ：Method类型的路由断言

#spring:
#  profiles:
#    active: method_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: method_route
#        uri: http://httpbin.org:80/get
#        predicates:
#        - Method=GET
#  profiles: method_route

#######################################################################################

### 6：test 7 ：path的路由断言

#spring:
#  profiles:
#    active: path_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: path_route
#        uri: http://httpbin.org:80/get
#        predicates:
#        - Path=/foo/{segment}
#  profiles: path_route

#######################################################################################

### 7：test 8 ：Get请求查询参数的路由断言

#spring:
#  profiles:
#    active: query_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: query_route
#        uri: http://httpbin.org:80/get
#        predicates: # http://localhost:8080?foo=bar 能被转发。ba. ：表示以ba开发的请求均能被转发
#        - Query=foo, ba.
#  profiles: query_route

## 二：参考：https://www.fangzhipeng.com/springcloud/2018/12/21/sc-f-gatway3.html

### 1：test 9 ：AddRequestHeaderGatewayFilterFactory 工厂使用

#spring:
#  profiles:
#    active: add_request_header_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: add_request_header_route
#        uri: http://httpbin.org:80/get # 在chrome上是输入：http://localhost:8080/get ，能被转发到 http://httpbin.org:80/get
#        filters:
#        - AddRequestHeader=X-Request-Foo, Bar  # AddRequestHeaderGatewayFilterFactory的简写即可
##        - AddResponseHeader=A, B
#        predicates:
#        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
#  profiles: add_request_header_route

#######################################################################################

### 1：test 10 ：RewritePathGatewayFilterFactory 工厂使用

#spring:
#  profiles:
#    active: rewritepath_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: rewrite_path_route
#        uri: https://blog.csdn.net
#        filters:
#        - RewritePath=/foo/(?<segment>.*), /$\{segment}
#        predicates:
#        - Path=/foo/**
#  profiles: rewritepath_route

#######################################################################################

### 2：test 11 ：自定义过滤器工厂的使用

#spring:
#  profiles:
#    active: request_time_route
#
#---
#
#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: request_time_route
#        uri: http://httpbin.org:80/get
#        filters:
#        - RequestTime=false
#        predicates:
#        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
#  profiles: request_time_route


## 三：参考：https://www.fangzhipeng.com/springcloud/2018/12/22/sc-f-gatway4.html

### 3：test 12 ：RequestRateLimiterGatewayFilterFactory 限流的使用

#spring:
#  cloud:
#    gateway:
#      routes:
#      - id: limit_route
#        uri: http://httpbin.org:80/get # 在chrome上是输入：http://localhost:8080/get ，能被转发到 http://httpbin.org:80/get
#        predicates:
#        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
#        filters:
#        - name: RequestRateLimiter # 直接简写 RequestRateLimiterGatewayFilterFactory 即可
#          args:
#            key-resolver: '#{@hostAddrKeyResolver}' # 用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。
#            redis-rate-limiter.replenishRate: 1 # 令牌桶每秒填充平均速率：1个/s
#            redis-rate-limiter.burstCapacity: 3 # 令牌桶总容量：3个
#  application:
#    name: gateway-limiter
#  redis:
#    host: 127.0.0.1
#    port: 6379
#    database: 0
#    password: zhuchen1994

#######################################################################################

## 四：参考：https://www.fangzhipeng.com/springcloud/2018/12/23/sc-f-gateway5.html

### 4：test 13 ：gateway配合eureka的使用

## A：http://localhost:8081/lavender-service-provider/hello : 请求必须带上lavender-service-provider前缀，才能转发，否则无法转发。

#spring:
#  application:
#    name: gateway-service
#  cloud:
#    gateway:
#      discovery:
#        locator:
#          # 开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务。
#          enabled: true
#          lower-case-service-id: true
#
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://localhost:8080/eureka/

## B：http://localhost:8081/demo/hello : predicate会将"/demo"请求转发到eureka的这个服务上"LAVENDER-SERVICE-PROVIDER"，StripPrefix : 在转发之前会将 "/demo" 去掉，然后进行转发

#spring:
#  application:
#    name: gateway-service
#  cloud:
#    gateway:
#      discovery:
#        locator:
#          # 开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务。
#          enabled: false
#          lower-case-service-id: true
#      routes:
#      - id: lavender-service-provider
#        uri: lb://LAVENDER-SERVICE-PROVIDER
#        predicates:
#          - Path=/demo/**
#        filters:
#          - StripPrefix=1
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://localhost:8080/eureka/



### 5：test 14 ：动态网关，使用Redis存储

## 参考：https://blog.csdn.net/tianyaleixiaowu/article/details/83412301
## http://localhost:8081/demo/dynamic : predicate会将"/demo"请求转发到eureka的这个服务上"LAVENDER-SERVICE-PROVIDER"，StripPrefix : 在转发之前会将 "/demo" 去掉，然后进行转发，转发url：LAVENDER-SERVICE-PROVIDER/dynamic

spring:
  application:
    name: gateway-dynamic
  cloud:
    gateway:
      discovery:
        locator:
          # 开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务。
          enabled: false
          lower-case-service-id: true
#      routes:
#      - id: gateway-dynamic
#        uri: lb://LAVENDER-SERVICE-PROVIDER # 无法将请求转发给gateway自身的Controller，即无法将请求转发给lavender-gateway中的controller
#        predicates:
#          - Path=/demo/**
#        filters:
#          - StripPrefix=1 # 去掉Path中第一个参数的前缀
  redis:
    password: zhuchen1994
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8080/eureka/

